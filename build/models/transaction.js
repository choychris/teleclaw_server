"use strict";var _beforeSave=require("../utils/beforeSave"),_createLogging=require("../utils/createLogging"),_makeTransaction=require("../utils/makeTransaction"),braintree=require("braintree"),shortid=require("shortid"),Promise=require("bluebird"),_process$env=process.env,NODE_ENV=_process$env.NODE_ENV,BRAINTREE_MERCHANTID=_process$env.BRAINTREE_MERCHANTID,BRAINTREE_PUBLICKEY=_process$env.BRAINTREE_PUBLICKEY,BRAINTREE_PRIVATEKEY=_process$env.BRAINTREE_PRIVATEKEY,braintreeEnv="production"===NODE_ENV?braintree.Environment.Production:braintree.Environment.Sandbox,braintreeGateway=braintree.connect({environment:braintreeEnv,merchantId:BRAINTREE_MERCHANTID,publicKey:BRAINTREE_PUBLICKEY,privateKey:BRAINTREE_PRIVATEKEY}),app=require("../server");module.exports=function(e){(0,_createLogging.loggingModel)(e),(0,_createLogging.loggingRemote)(e,"clientToken"),(0,_createLogging.loggingRemote)(e,"createSale"),(0,_beforeSave.updateTimeStamp)(e),e.observe("before save",function(e,n){e.isNewInstance&&(e.instance.id=shortid.generate()),n()}),e.observe("after save",function(e,n){if(e.isNewInstance){var t=app.models.Wallet,r=e.instance,a=r.walletId,o=r.action,s=r.amount,c=r.success,i="ticket"===r.category?"ticket":"balance";c&&(0,_makeTransaction.makeCalculation)(t,a,i,s,o)}n()}),e.clientToken=function(n,r){var t=app.models.PaymentGateway;function a(e,t){braintreeGateway.clientToken.generate({customerId:e},function(e,n){e&&((0,_createLogging.loggingFunction)("Transaction | ","Braintree generate clientToken | ",e,"error"),r(e)),t(null,n.clientToken)})}t.findOne({where:{userId:n}}).then(function(e){return null===e?t.create({userId:n}):(a(e.id,r),null)}).then(function(e){if(null!==e){var n=e.id;braintreeGateway.customer.create({id:n},function(e){e&&((0,_createLogging.loggingFunction)("Transaction | ","Create BrainTree Customer | ",e,"error"),r(e)),a(n,r)})}}).catch(function(e){(0,_createLogging.loggingFunction)("Transaction | ","Paymentgateway.findOne | ",e,"error"),r(e)})},e.remoteMethod("clientToken",{http:{path:"/:userId/clientToken",verb:"get"},accepts:[{arg:"userId",type:"string",required:!0}],returns:{arg:"result",type:"object"}}),e.createSale=function(I,e,v){var a=e.paymentNonce,n=e.rateId,t=app.models,r=t.ExchangeRate,o=t.PaymentGateway;Promise.all([r.findById(n),o.findOne({where:{userId:I}})]).then(function(e){var n=e[0],t=e[1],r={amount:n.currency.hkd+".00",paymentMethodNonce:a,customerId:t.id,options:{submitForSettlement:!0,storeInVaultOnSuccess:!0,paypal:{description:"Teleclaw Coins Purchase."}}};return[braintreeGateway.transaction.sale(r),n]}).spread(function(e,n){var t=n.coins+n.bonus;if(e.success){var r=e.success,a=e.transaction,o=a.id,s=a.status,c=a.amount,i=a.currencyIsoCode,u=a.merchantAccountId,l=a.paymentInstrumentType,g=a.creditCard.cardType,p={id:o,status:s,amount:c,currencyIsoCode:i,merchantAccountId:u,paymentInstrumentType:l,cardType:g};(0,_createLogging.loggingFunction)("Transaction | ","Braintree Transaction Success | ",p),(0,_makeTransaction.createNewTransaction)(I,t,"topUp","plus",r,void 0,p).then(function(e){return v(null,{success:r,message:s,balance:e.newWalletBalance}),null})}else{var d=e.success,m=e.message,T=e.params,E=e.transaction.processorResponseCode?m+" (code : "+e.transaction.processorResponseCode+")":m;(0,_createLogging.loggingFunction)("Transaction | ","Braintree Transaction Error | ",E,"error");var R={message:m,amount:T.transaction.amount};e.transaction&&(R.transaction={id:e.transaction.id,status:e.transaction.status,gatewayRejectionReason:e.transaction.gatewayRejectionReason,processorResponseCode:e.transaction.processorResponseCode,processorResponseText:e.transaction.processorResponseText,additionalProcessorResponse:e.transaction.additionalProcessorResponse,processorSettlementResponseCode:e.transaction.processorSettlementResponseCode,processorSettlementResponseText:e.transaction.processorSettlementResponseText}),(0,_makeTransaction.createNewTransaction)(I,t,"topUp","plus",d,void 0,R).then(function(e){return v(null,{success:d,message:E,balance:e.newWalletBalance}),null})}return null}).catch(function(e){(0,_createLogging.loggingFunction)("Transaction | ","Create Sale Function Error | ",e,"error"),v(e)})},e.remoteMethod("createSale",{http:{path:"/:userId/createSale",verb:"post"},accepts:[{arg:"userId",type:"string",required:!0},{arg:"data",type:"object",required:!0}],returns:{arg:"result",type:"object"}})};